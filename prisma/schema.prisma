generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "filteredRelationCount"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           Int      @id @default(autoincrement())
  username     String
  email        String   @unique
  password     String
  profileImage String?
  description  String?
  scores       Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  credential UserCredential[]
  questions  Question[]
  replies    Reply[]

  acceptedUpvotes   Upvote[]   @relation("userAcceptedUpvote")
  acceptedDownvotes Downvote[] @relation("userAcceptedDownvote")
  givenUpvotes      Upvote[]   @relation("userGivenUpvote")
  givenDownvotes    Downvote[] @relation("userGivenDownvote")
}

model UserCredential {
  userId Int
  uuid   String
  type   CredentialType
  user   User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, type])
}

enum CredentialType {
  ACCESS
  REFRESH
}

model Topic {
  id           Int        @id @default(autoincrement())
  name         String
  profileImage String?
  grade        TopicGrade

  questions Question[]

  @@unique([name, grade])
}

enum TopicGrade {
  SD
  SMP
  SMA
}

model Question {
  id        Int          @id @default(autoincrement())
  author    User         @relation(fields: [authorId], references: [id])
  authorId  Int
  topic     Topic        @relation(fields: [topicId], references: [id])
  topicId   Int
  type      QuestionType
  body      String
  image     String?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  choices QuestionChoice[]
  replies Reply[]
}

enum QuestionType {
  ESSAY
  MULTIPLE_CHOICE
}

model QuestionChoice {
  id         Int      @id @default(autoincrement())
  body       String
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Reply {
  id         Int      @id @default(autoincrement())
  author     User     @relation(fields: [authorId], references: [id])
  authorId   Int
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int
  body       String
  image      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  upvotes   Upvote[]
  downvotes Downvote[]
}

model Upvote {
  user      User  @relation("userAcceptedUpvote", fields: [userId], references: [id])
  userId    Int
  givenBy   User  @relation("userGivenUpvote", fields: [givenById], references: [id])
  givenById Int
  reply     Reply @relation(fields: [replyId], references: [id])
  replyId   Int

  @@id([userId, givenById, replyId])
}

model Downvote {
  user      User  @relation("userAcceptedDownvote", fields: [userId], references: [id])
  userId    Int
  givenBy   User  @relation("userGivenDownvote", fields: [givenById], references: [id])
  givenById Int
  reply     Reply @relation(fields: [replyId], references: [id])
  replyId   Int

  @@id([userId, givenById, replyId])
}
